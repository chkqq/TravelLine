// <auto-generated />
using DatabaseProvider;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarMechanicDbMigrations.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20230713131330_sfdvdsfnj")]
    partial class sfdvdsfnj
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Models.Car", b =>
                {
                    b.Property<int>("CarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CarId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarId"));

                    b.Property<string>("CarName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CarName");

                    b.Property<int>("HorsePower")
                        .HasColumnType("int")
                        .HasColumnName("HorsePower");

                    b.Property<string>("TypeOfRepair")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TypeOfRepair");

                    b.HasKey("CarId");

                    b.ToTable("Car", (string)null);
                });

            modelBuilder.Entity("Core.Models.CarMechanic", b =>
                {
                    b.Property<int>("CarMechanicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CarMechanicId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarMechanicId"));

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("RepairCost")
                        .HasColumnType("int")
                        .HasColumnName("RepairCost");

                    b.HasKey("CarMechanicId");

                    b.HasIndex("CarId");

                    b.HasIndex("ClientId");

                    b.ToTable("CarMechanic", (string)null);
                });

            modelBuilder.Entity("Core.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"));

                    b.Property<string>("ClientFirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ClientFirstName");

                    b.Property<string>("ClientLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ClientLastName");

                    b.HasKey("ClientId");

                    b.ToTable("Client", (string)null);
                });

            modelBuilder.Entity("Core.Models.CarMechanic", b =>
                {
                    b.HasOne("Core.Models.Car", "Car")
                        .WithMany("CarMechanics")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Client", "Client")
                        .WithMany("CarMechanics")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Core.Models.Car", b =>
                {
                    b.Navigation("CarMechanics");
                });

            modelBuilder.Entity("Core.Models.Client", b =>
                {
                    b.Navigation("CarMechanics");
                });
#pragma warning restore 612, 618
        }
    }
}
